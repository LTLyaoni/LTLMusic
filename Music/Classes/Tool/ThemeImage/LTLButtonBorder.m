//
//  LTLButtonBorder.m
//  音乐播放器
//
//  Created by 李泰良 on 16/11/25.
//  Copyright © 2016 LTL. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

@import UIKit;
#import "LTLButtonBorder.h"



@implementation LTLButtonBorder


#pragma mark - Canvas Drawings

//! Page 1

+(void) drawArtboard
{
    [LTLButtonBorder drawArtboardWithFrame:CGRectMake(0, 0, 200, 63) resizing:LTLButtonBorderResizingBehaviorAspectFit];
}

+(void) drawArtboardWithFrame:(CGRect)frame resizing:(LTLButtonBorderResizingBehavior)resizing
{
    //! General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //! Resize To Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = LTLButtonBorderResizingBehaviorApply(resizing, CGRectMake(0, 0, 200, 63), frame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGSize resizedScale = CGSizeMake(resizedFrame.size.width / 200, resizedFrame.size.height / 63);
    CGContextScaleCTM(context, resizedScale.width, resizedScale.height);
    
    //! Combined Shape
    UIBezierPath *combinedShape = [UIBezierPath bezierPath];
    [combinedShape moveToPoint:CGPointMake(123.8, 41)];
    [combinedShape addLineToPoint:CGPointMake(16.46, 41)];
    [combinedShape addLineToPoint:CGPointMake(16.46, 40.99)];
    [combinedShape addCurveToPoint:CGPointMake(16.1, 41) controlPoint1:CGPointMake(16.34, 41) controlPoint2:CGPointMake(16.22, 41)];
    [combinedShape addCurveToPoint:CGPointMake(0, 20.5) controlPoint1:CGPointMake(7.21, 41) controlPoint2:CGPointMake(0, 31.82)];
    [combinedShape addCurveToPoint:CGPointMake(16.1, 0) controlPoint1:CGPointMake(0, 9.18) controlPoint2:CGPointMake(7.21, 0)];
    [combinedShape addCurveToPoint:CGPointMake(16.46, 0.01) controlPoint1:CGPointMake(16.22, 0) controlPoint2:CGPointMake(16.34, 0)];
    [combinedShape addLineToPoint:CGPointMake(16.46, 0)];
    [combinedShape addLineToPoint:CGPointMake(123.8, 0)];
    [combinedShape addCurveToPoint:CGPointMake(123.9, 0) controlPoint1:CGPointMake(123.84, 0) controlPoint2:CGPointMake(123.87, 0)];
    [combinedShape addCurveToPoint:CGPointMake(140, 20.5) controlPoint1:CGPointMake(132.79, 0) controlPoint2:CGPointMake(140, 9.18)];
    [combinedShape addCurveToPoint:CGPointMake(123.9, 41) controlPoint1:CGPointMake(140, 31.82) controlPoint2:CGPointMake(132.79, 41)];
    [combinedShape addCurveToPoint:CGPointMake(123.8, 41) controlPoint1:CGPointMake(123.87, 41) controlPoint2:CGPointMake(123.84, 41)];
    [combinedShape closePath];
    [combinedShape moveToPoint:CGPointMake(123.8, 41)];
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 30, 11);
    combinedShape.usesEvenOddFillRule = YES;
    [[UIColor colorWithWhite:0.847 alpha:0] setFill];
    [combinedShape fill];
    combinedShape.lineJoinStyle = kCGLineJoinRound;
    combinedShape.lineWidth = 6;
    [[LTLThemeManager sharedManager].themeColor setStroke];
    [combinedShape stroke];
    CGContextRestoreGState(context);
    
    CGContextRestoreGState(context);
}


#pragma mark - Canvas Images

//! Page 1

+(UIImage *) imageOfArtboard
{
    static UIImage * image = nil;
    if (image != nil)
        return image;
    
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(200, 63), NO, 0);
    [LTLButtonBorder drawArtboard];
    image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return image;
}

+(UIImage *) imageOfArtboardWithSize:(CGSize)size resizing:(LTLButtonBorderResizingBehavior)resizing
{
    UIImage *image = nil;
    
    UIGraphicsBeginImageContextWithOptions(size, NO, 0);
    [LTLButtonBorder drawArtboardWithFrame:CGRectMake(0, 0, size.width, size.height) resizing:resizing];
    image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return image;
}


#pragma mark - Resizing Behavior

CGRect LTLButtonBorderResizingBehaviorApply(LTLButtonBorderResizingBehavior behavior, CGRect rect, CGRect target)
{
    if (CGRectEqualToRect(rect, target) || CGRectEqualToRect(target, CGRectZero))
    {
        return rect;
    }
    
    CGSize scales = CGSizeZero;
    scales.width = ABS(target.size.width / rect.size.width);
    scales.height = ABS(target.size.height / rect.size.height);
    
    switch (behavior)
    {
        case LTLButtonBorderResizingBehaviorAspectFit:
        {
            scales.width = MIN(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case LTLButtonBorderResizingBehaviorAspectFill:
        {
            scales.width = MAX(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case LTLButtonBorderResizingBehaviorStretch:
            break;
        
        case LTLButtonBorderResizingBehaviorCenter:
        {
            scales.width = 1;
            scales.height = 1;
            break;
        }
    }
    
    CGRect result = CGRectStandardize(rect);
    result.size.width *= scales.width;
    result.size.height *= scales.height;
    result.origin.x = target.origin.x + (target.size.width - result.size.width) / 2;
    result.origin.y = target.origin.y + (target.size.height - result.size.height) / 2;
    return result;
}


@end
