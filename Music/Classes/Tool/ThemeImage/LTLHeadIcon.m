//
//  LTLHeadIcon.m
//  音乐播放器
//
//  Created by 李泰良 on 16/12/13.
//  Copyright © 2016 LTL. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

@import UIKit;
#import "LTLHeadIcon.h"



@implementation LTLHeadIcon


#pragma mark - Canvas Drawings

//! Page 1

+(void) drawMore
{
    [LTLHeadIcon drawMoreWithFrame:CGRectMake(0, 0, 45, 40) resizing:LTLHeadIconResizingBehaviorAspectFit];
}

+(void) drawMoreWithFrame:(CGRect)frame resizing:(LTLHeadIconResizingBehavior)resizing
{
    //! General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //! Resize To Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = LTLHeadIconResizingBehaviorApply(resizing, CGRectMake(0, 0, 45, 40), frame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGSize resizedScale = CGSizeMake(resizedFrame.size.width / 45, resizedFrame.size.height / 40);
    CGContextScaleCTM(context, resizedScale.width, resizedScale.height);
    
    //! More
    UIBezierPath *more2 = [UIBezierPath bezierPath];
    [more2 moveToPoint:CGPointMake(13.51, 18.99)];
    [more2 addCurveToPoint:CGPointMake(12.46, 18.55) controlPoint1:CGPointMake(13.13, 18.99) controlPoint2:CGPointMake(12.75, 18.84)];
    [more2 addCurveToPoint:CGPointMake(12.46, 16.45) controlPoint1:CGPointMake(11.88, 17.97) controlPoint2:CGPointMake(11.88, 17.03)];
    [more2 addLineToPoint:CGPointMake(19.42, 9.49)];
    [more2 addLineToPoint:CGPointMake(12.46, 2.53)];
    [more2 addCurveToPoint:CGPointMake(12.46, 0.43) controlPoint1:CGPointMake(11.88, 1.95) controlPoint2:CGPointMake(11.88, 1.01)];
    [more2 addCurveToPoint:CGPointMake(14.56, 0.43) controlPoint1:CGPointMake(13.04, -0.14) controlPoint2:CGPointMake(13.98, -0.14)];
    [more2 addLineToPoint:CGPointMake(22.57, 8.44)];
    [more2 addCurveToPoint:CGPointMake(22.57, 10.54) controlPoint1:CGPointMake(23.14, 9.02) controlPoint2:CGPointMake(23.14, 9.96)];
    [more2 addLineToPoint:CGPointMake(14.56, 18.55)];
    [more2 addCurveToPoint:CGPointMake(13.51, 18.99) controlPoint1:CGPointMake(14.27, 18.84) controlPoint2:CGPointMake(13.89, 18.99)];
    [more2 closePath];
    [more2 moveToPoint:CGPointMake(1.48, 18.99)];
    [more2 addCurveToPoint:CGPointMake(0.43, 18.55) controlPoint1:CGPointMake(1.1, 18.99) controlPoint2:CGPointMake(0.72, 18.84)];
    [more2 addCurveToPoint:CGPointMake(0.43, 16.45) controlPoint1:CGPointMake(-0.14, 17.97) controlPoint2:CGPointMake(-0.14, 17.03)];
    [more2 addLineToPoint:CGPointMake(7.39, 9.49)];
    [more2 addLineToPoint:CGPointMake(0.43, 2.53)];
    [more2 addCurveToPoint:CGPointMake(0.43, 0.43) controlPoint1:CGPointMake(-0.14, 1.95) controlPoint2:CGPointMake(-0.14, 1.01)];
    [more2 addCurveToPoint:CGPointMake(2.53, 0.43) controlPoint1:CGPointMake(1.01, -0.14) controlPoint2:CGPointMake(1.95, -0.14)];
    [more2 addLineToPoint:CGPointMake(10.54, 8.44)];
    [more2 addCurveToPoint:CGPointMake(10.54, 10.54) controlPoint1:CGPointMake(11.12, 9.02) controlPoint2:CGPointMake(11.12, 9.96)];
    [more2 addLineToPoint:CGPointMake(2.53, 18.55)];
    [more2 addCurveToPoint:CGPointMake(1.48, 18.99) controlPoint1:CGPointMake(2.24, 18.84) controlPoint2:CGPointMake(1.86, 18.99)];
    [more2 closePath];
    [more2 moveToPoint:CGPointMake(1.48, 18.99)];
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 11, 11);
    more2.lineWidth = 2;
    [[LTLThemeManager sharedManager].themeColor setStroke];
    [more2 stroke];
    CGContextRestoreGState(context);
    
    CGContextRestoreGState(context);
}

+(void) drawPlay
{
    [LTLHeadIcon drawPlayWithFrame:CGRectMake(0, 0, 40, 40) resizing:LTLHeadIconResizingBehaviorAspectFit];
}

+(void) drawPlayWithFrame:(CGRect)frame resizing:(LTLHeadIconResizingBehavior)resizing
{
    //! General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //! Resize To Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = LTLHeadIconResizingBehaviorApply(resizing, CGRectMake(0, 0, 40, 40), frame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGSize resizedScale = CGSizeMake(resizedFrame.size.width / 40, resizedFrame.size.height / 40);
    CGContextScaleCTM(context, resizedScale.width, resizedScale.height);
    
    //! play
    UIBezierPath *play2 = [UIBezierPath bezierPath];
    [play2 moveToPoint:CGPointMake(1.93, 0.15)];
    [play2 addLineToPoint:CGPointMake(16.36, 7.51)];
    [play2 addCurveToPoint:CGPointMake(16.36, 9.49) controlPoint1:CGPointMake(17.21, 7.95) controlPoint2:CGPointMake(17.21, 9.05)];
    [play2 addLineToPoint:CGPointMake(1.93, 16.85)];
    [play2 addCurveToPoint:CGPointMake(0, 15.86) controlPoint1:CGPointMake(1.07, 17.28) controlPoint2:CGPointMake(0, 16.74)];
    [play2 addLineToPoint:CGPointMake(0, 1.14)];
    [play2 addCurveToPoint:CGPointMake(1.93, 0.15) controlPoint1:CGPointMake(0, 0.26) controlPoint2:CGPointMake(1.07, -0.28)];
    [play2 addLineToPoint:CGPointMake(1.93, 0.15)];
    [play2 closePath];
    [play2 moveToPoint:CGPointMake(1.93, 0.15)];
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 12, 12);
    play2.lineJoinStyle = kCGLineJoinRound;
    play2.lineCapStyle = kCGLineCapRound;
    play2.lineWidth = 3;
    [[LTLThemeManager sharedManager].themeColor setStroke];
    [play2 stroke];
    CGContextRestoreGState(context);
    
    CGContextRestoreGState(context);
}


#pragma mark - Canvas Images

//! Page 1

+(UIImage *) imageOfMore
{
    static UIImage * image = nil;
    if (image != nil)
        return image;
    
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(45, 40), NO, 0);
    [LTLHeadIcon drawMore];
    image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return image;
}

+(UIImage *) imageOfMoreWithSize:(CGSize)size resizing:(LTLHeadIconResizingBehavior)resizing
{
    UIImage *image = nil;
    
    UIGraphicsBeginImageContextWithOptions(size, NO, 0);
    [LTLHeadIcon drawMoreWithFrame:CGRectMake(0, 0, size.width, size.height) resizing:resizing];
    image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return image;
}

+(UIImage *) imageOfPlay
{
    static UIImage * image = nil;
    if (image != nil)
        return image;
    
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0);
    [LTLHeadIcon drawPlay];
    image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return image;
}

+(UIImage *) imageOfPlayWithSize:(CGSize)size resizing:(LTLHeadIconResizingBehavior)resizing
{
    UIImage *image = nil;
    
    UIGraphicsBeginImageContextWithOptions(size, NO, 0);
    [LTLHeadIcon drawPlayWithFrame:CGRectMake(0, 0, size.width, size.height) resizing:resizing];
    image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return image;
}


#pragma mark - Resizing Behavior

CGRect LTLHeadIconResizingBehaviorApply(LTLHeadIconResizingBehavior behavior, CGRect rect, CGRect target)
{
    if (CGRectEqualToRect(rect, target) || CGRectEqualToRect(target, CGRectZero))
    {
        return rect;
    }
    
    CGSize scales = CGSizeZero;
    scales.width = ABS(target.size.width / rect.size.width);
    scales.height = ABS(target.size.height / rect.size.height);
    
    switch (behavior)
    {
        case LTLHeadIconResizingBehaviorAspectFit:
        {
            scales.width = MIN(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case LTLHeadIconResizingBehaviorAspectFill:
        {
            scales.width = MAX(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case LTLHeadIconResizingBehaviorStretch:
            break;
        
        case LTLHeadIconResizingBehaviorCenter:
        {
            scales.width = 1;
            scales.height = 1;
            break;
        }
    }
    
    CGRect result = CGRectStandardize(rect);
    result.size.width *= scales.width;
    result.size.height *= scales.height;
    result.origin.x = target.origin.x + (target.size.width - result.size.width) / 2;
    result.origin.y = target.origin.y + (target.size.height - result.size.height) / 2;
    return result;
}


@end
