//
//  LTLMagnifier.m
//  音乐播放器
//
//  Created by 李泰良 on 16/11/26.
//  Copyright © 2016 LTL. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

@import UIKit;
#import "LTLMagnifier.h"



@implementation LTLMagnifier


#pragma mark - Canvas Drawings

//! Page 1

+(void) drawArtboard
{
    [LTLMagnifier drawArtboardWithFrame:CGRectMake(0, 0, 38, 38) resizing:LTLMagnifierResizingBehaviorAspectFit];
}

+(void) drawArtboardWithFrame:(CGRect)frame resizing:(LTLMagnifierResizingBehavior)resizing
{
    //! General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //! Resize To Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = LTLMagnifierResizingBehaviorApply(resizing, CGRectMake(0, 0, 38, 38), frame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGSize resizedScale = CGSizeMake(resizedFrame.size.width / 38, resizedFrame.size.height / 38);
    CGContextScaleCTM(context, resizedScale.width, resizedScale.height);
    
    //! Shape
    UIBezierPath *shape = [UIBezierPath bezierPath];
    [shape moveToPoint:CGPointMake(11.65, 23.3)];
    [shape addCurveToPoint:CGPointMake(19.11, 20.6) controlPoint1:CGPointMake(14.41, 23.3) controlPoint2:CGPointMake(17.02, 22.35)];
    [shape addLineToPoint:CGPointMake(20.18, 21.68)];
    [shape addLineToPoint:CGPointMake(19.83, 22.03)];
    [shape addCurveToPoint:CGPointMake(19.53, 22.74) controlPoint1:CGPointMake(19.64, 22.22) controlPoint2:CGPointMake(19.53, 22.48)];
    [shape addCurveToPoint:CGPointMake(19.83, 23.45) controlPoint1:CGPointMake(19.53, 23.01) controlPoint2:CGPointMake(19.64, 23.26)];
    [shape addLineToPoint:CGPointMake(28.08, 31.7)];
    [shape addCurveToPoint:CGPointMake(28.79, 32) controlPoint1:CGPointMake(28.28, 31.9) controlPoint2:CGPointMake(28.54, 32)];
    [shape addCurveToPoint:CGPointMake(29.5, 31.7) controlPoint1:CGPointMake(29.05, 32) controlPoint2:CGPointMake(29.3, 31.9)];
    [shape addLineToPoint:CGPointMake(31.71, 29.5)];
    [shape addCurveToPoint:CGPointMake(32, 28.79) controlPoint1:CGPointMake(31.89, 29.31) controlPoint2:CGPointMake(32, 29.05)];
    [shape addCurveToPoint:CGPointMake(31.71, 28.08) controlPoint1:CGPointMake(32, 28.52) controlPoint2:CGPointMake(31.89, 28.27)];
    [shape addLineToPoint:CGPointMake(23.45, 19.83)];
    [shape addCurveToPoint:CGPointMake(22.04, 19.83) controlPoint1:CGPointMake(23.06, 19.43) controlPoint2:CGPointMake(22.43, 19.43)];
    [shape addLineToPoint:CGPointMake(21.6, 20.26)];
    [shape addLineToPoint:CGPointMake(20.53, 19.19)];
    [shape addCurveToPoint:CGPointMake(23.3, 11.65) controlPoint1:CGPointMake(22.32, 17.09) controlPoint2:CGPointMake(23.3, 14.45)];
    [shape addCurveToPoint:CGPointMake(19.89, 3.41) controlPoint1:CGPointMake(23.3, 8.54) controlPoint2:CGPointMake(22.09, 5.61)];
    [shape addCurveToPoint:CGPointMake(11.65, 0) controlPoint1:CGPointMake(17.69, 1.21) controlPoint2:CGPointMake(14.76, 0)];
    [shape addCurveToPoint:CGPointMake(3.41, 3.41) controlPoint1:CGPointMake(8.54, 0) controlPoint2:CGPointMake(5.61, 1.21)];
    [shape addCurveToPoint:CGPointMake(0, 11.65) controlPoint1:CGPointMake(1.21, 5.61) controlPoint2:CGPointMake(0, 8.54)];
    [shape addCurveToPoint:CGPointMake(3.41, 19.89) controlPoint1:CGPointMake(0, 14.76) controlPoint2:CGPointMake(1.21, 17.69)];
    [shape addCurveToPoint:CGPointMake(11.65, 23.3) controlPoint1:CGPointMake(5.61, 22.09) controlPoint2:CGPointMake(8.54, 23.3)];
    [shape addLineToPoint:CGPointMake(11.65, 23.3)];
    [shape closePath];
    [shape moveToPoint:CGPointMake(29.58, 28.79)];
    [shape addLineToPoint:CGPointMake(28.79, 29.58)];
    [shape addLineToPoint:CGPointMake(21.95, 22.74)];
    [shape addLineToPoint:CGPointMake(22.74, 21.95)];
    [shape addLineToPoint:CGPointMake(29.58, 28.79)];
    [shape addLineToPoint:CGPointMake(29.58, 28.79)];
    [shape closePath];
    [shape moveToPoint:CGPointMake(4.83, 4.83)];
    [shape addCurveToPoint:CGPointMake(11.65, 2) controlPoint1:CGPointMake(6.65, 3.01) controlPoint2:CGPointMake(9.07, 2)];
    [shape addCurveToPoint:CGPointMake(18.47, 4.83) controlPoint1:CGPointMake(14.23, 2) controlPoint2:CGPointMake(16.65, 3.01)];
    [shape addCurveToPoint:CGPointMake(21.3, 11.65) controlPoint1:CGPointMake(20.3, 6.65) controlPoint2:CGPointMake(21.3, 9.07)];
    [shape addCurveToPoint:CGPointMake(18.47, 18.48) controlPoint1:CGPointMake(21.3, 14.23) controlPoint2:CGPointMake(20.3, 16.65)];
    [shape addCurveToPoint:CGPointMake(11.65, 21.3) controlPoint1:CGPointMake(16.65, 20.3) controlPoint2:CGPointMake(14.23, 21.3)];
    [shape addCurveToPoint:CGPointMake(4.83, 18.48) controlPoint1:CGPointMake(9.07, 21.3) controlPoint2:CGPointMake(6.65, 20.3)];
    [shape addCurveToPoint:CGPointMake(2, 11.65) controlPoint1:CGPointMake(3, 16.65) controlPoint2:CGPointMake(2, 14.23)];
    [shape addCurveToPoint:CGPointMake(4.83, 4.83) controlPoint1:CGPointMake(2, 9.07) controlPoint2:CGPointMake(3, 6.65)];
    [shape addLineToPoint:CGPointMake(4.83, 4.83)];
    [shape closePath];
    [shape moveToPoint:CGPointMake(4.83, 4.83)];
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 3.27, 3.59);
    shape.usesEvenOddFillRule = YES;
    [[LTLThemeManager sharedManager].themeColor setFill];
    [shape fill];
    CGContextRestoreGState(context);
    
    CGContextRestoreGState(context);
}


#pragma mark - Canvas Images

//! Page 1

+(UIImage *) imageOfArtboard
{
    static UIImage * image = nil;
    if (image != nil)
        return image;
    
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(38, 38), NO, 0);
    [LTLMagnifier drawArtboard];
    image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return image;
}

+(UIImage *) imageOfArtboardWithSize:(CGSize)size resizing:(LTLMagnifierResizingBehavior)resizing
{
    UIImage *image = nil;
    
    UIGraphicsBeginImageContextWithOptions(size, NO, 0);
    [LTLMagnifier drawArtboardWithFrame:CGRectMake(0, 0, size.width, size.height) resizing:resizing];
    image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return image;
}


#pragma mark - Resizing Behavior

CGRect LTLMagnifierResizingBehaviorApply(LTLMagnifierResizingBehavior behavior, CGRect rect, CGRect target)
{
    if (CGRectEqualToRect(rect, target) || CGRectEqualToRect(target, CGRectZero))
    {
        return rect;
    }
    
    CGSize scales = CGSizeZero;
    scales.width = ABS(target.size.width / rect.size.width);
    scales.height = ABS(target.size.height / rect.size.height);
    
    switch (behavior)
    {
        case LTLMagnifierResizingBehaviorAspectFit:
        {
            scales.width = MIN(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case LTLMagnifierResizingBehaviorAspectFill:
        {
            scales.width = MAX(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case LTLMagnifierResizingBehaviorStretch:
            break;
        
        case LTLMagnifierResizingBehaviorCenter:
        {
            scales.width = 1;
            scales.height = 1;
            break;
        }
    }
    
    CGRect result = CGRectStandardize(rect);
    result.size.width *= scales.width;
    result.size.height *= scales.height;
    result.origin.x = target.origin.x + (target.size.width - result.size.width) / 2;
    result.origin.y = target.origin.y + (target.size.height - result.size.height) / 2;
    return result;
}


@end
