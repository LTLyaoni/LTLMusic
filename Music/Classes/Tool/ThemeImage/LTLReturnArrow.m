//
//  LTLReturnArrow.m
//  音乐播放器
//
//  Created by 李泰良 on 16/11/26.
//  Copyright © 2016 LTL. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

@import UIKit;
#import "LTLReturnArrow.h"



@implementation LTLReturnArrow


#pragma mark - Canvas Drawings

//! Page 1

+(void) drawArtboard
{
    [LTLReturnArrow drawArtboardWithFrame:CGRectMake(0, 0, 50, 50) resizing:LTLReturnArrowResizingBehaviorAspectFit];
}

+(void) drawArtboardWithFrame:(CGRect)frame resizing:(LTLReturnArrowResizingBehavior)resizing
{
    //! General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //! Resize To Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = LTLReturnArrowResizingBehaviorApply(resizing, CGRectMake(0, 0, 50, 50), frame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGSize resizedScale = CGSizeMake(resizedFrame.size.width / 50, resizedFrame.size.height / 50);
    CGContextScaleCTM(context, resizedScale.width, resizedScale.height);
    
    //! Page 1
    UIBezierPath *page2 = [UIBezierPath bezierPath];
    [page2 moveToPoint:CGPointMake(17.87, 35.75)];
    [page2 addCurveToPoint:CGPointMake(15.9, 34.93) controlPoint1:CGPointMake(17.16, 35.75) controlPoint2:CGPointMake(16.44, 35.48)];
    [page2 addLineToPoint:CGPointMake(0.82, 19.85)];
    [page2 addCurveToPoint:CGPointMake(0.82, 15.9) controlPoint1:CGPointMake(-0.27, 18.76) controlPoint2:CGPointMake(-0.27, 16.99)];
    [page2 addLineToPoint:CGPointMake(15.9, 0.82)];
    [page2 addCurveToPoint:CGPointMake(19.85, 0.82) controlPoint1:CGPointMake(16.99, -0.27) controlPoint2:CGPointMake(18.76, -0.27)];
    [page2 addCurveToPoint:CGPointMake(19.85, 4.77) controlPoint1:CGPointMake(20.94, 1.91) controlPoint2:CGPointMake(20.94, 3.68)];
    [page2 addLineToPoint:CGPointMake(6.74, 17.87)];
    [page2 addLineToPoint:CGPointMake(19.85, 30.98)];
    [page2 addCurveToPoint:CGPointMake(19.85, 34.93) controlPoint1:CGPointMake(20.94, 32.07) controlPoint2:CGPointMake(20.94, 33.84)];
    [page2 addCurveToPoint:CGPointMake(17.87, 35.75) controlPoint1:CGPointMake(19.3, 35.48) controlPoint2:CGPointMake(18.59, 35.75)];
    [page2 addLineToPoint:CGPointMake(17.87, 35.75)];
    [page2 closePath];
    [page2 moveToPoint:CGPointMake(17.87, 35.75)];
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 7);
    page2.lineWidth = 2;
    [[LTLThemeManager sharedManager].themeColor setStroke];
    [page2 stroke];
    CGContextRestoreGState(context);
    
    CGContextRestoreGState(context);
}


#pragma mark - Canvas Images

//! Page 1

+(UIImage *) imageOfArtboard
{
    static UIImage * image = nil;
    if (image != nil)
        return image;
    
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), NO, 0);
    [LTLReturnArrow drawArtboard];
    image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return image;
}

+(UIImage *) imageOfArtboardWithSize:(CGSize)size resizing:(LTLReturnArrowResizingBehavior)resizing
{
    UIImage *image = nil;
    
    UIGraphicsBeginImageContextWithOptions(size, NO, 0);
    [LTLReturnArrow drawArtboardWithFrame:CGRectMake(0, 0, size.width, size.height) resizing:resizing];
    image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return image;
}


#pragma mark - Resizing Behavior

CGRect LTLReturnArrowResizingBehaviorApply(LTLReturnArrowResizingBehavior behavior, CGRect rect, CGRect target)
{
    if (CGRectEqualToRect(rect, target) || CGRectEqualToRect(target, CGRectZero))
    {
        return rect;
    }
    
    CGSize scales = CGSizeZero;
    scales.width = ABS(target.size.width / rect.size.width);
    scales.height = ABS(target.size.height / rect.size.height);
    
    switch (behavior)
    {
        case LTLReturnArrowResizingBehaviorAspectFit:
        {
            scales.width = MIN(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case LTLReturnArrowResizingBehaviorAspectFill:
        {
            scales.width = MAX(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case LTLReturnArrowResizingBehaviorStretch:
            break;
        
        case LTLReturnArrowResizingBehaviorCenter:
        {
            scales.width = 1;
            scales.height = 1;
            break;
        }
    }
    
    CGRect result = CGRectStandardize(rect);
    result.size.width *= scales.width;
    result.size.height *= scales.height;
    result.origin.x = target.origin.x + (target.size.width - result.size.width) / 2;
    result.origin.y = target.origin.y + (target.size.height - result.size.height) / 2;
    return result;
}


@end
