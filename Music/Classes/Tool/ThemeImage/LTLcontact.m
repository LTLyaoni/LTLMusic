//
//  LTLcontact.m
//  音乐播放器
//
//  Created by 李泰良 on 16/12/16.
//  Copyright © 2016 LTL. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

@import UIKit;
#import "LTLcontact.h"



@implementation LTLcontact


#pragma mark - Canvas Drawings

//! Page 1

+(void) drawContact
{
    [LTLcontact drawContactWithFrame:CGRectMake(0, 0, 160, 160) resizing:LTLcontactResizingBehaviorAspectFit];
}

+(void) drawContactWithFrame:(CGRect)frame resizing:(LTLcontactResizingBehavior)resizing
{
    //! General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //! Resize To Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = LTLcontactResizingBehaviorApply(resizing, CGRectMake(0, 0, 160, 160), frame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGSize resizedScale = CGSizeMake(resizedFrame.size.width / 160, resizedFrame.size.height / 160);
    CGContextScaleCTM(context, resizedScale.width, resizedScale.height);
    
    //! Rectangle
    UIBezierPath *rectangle = [UIBezierPath bezierPathWithRoundedRect:CGRectMake(0, 0, 138, 138) cornerRadius:26];
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 11, 11);
    CGContextSaveGState(context);
    rectangle.lineWidth = 10;
    CGContextBeginPath(context);
    CGContextAddPath(context, rectangle.CGPath);
    CGContextEOClip(context);
    [[LTLThemeManager sharedManager].themeColor setStroke];
    [rectangle stroke];
    CGContextRestoreGState(context);
    CGContextRestoreGState(context);
    
    //! Fill 1
    UIBezierPath *fill1 = [UIBezierPath bezierPath];
    [fill1 moveToPoint:CGPointMake(22.77, 45.35)];
    [fill1 addLineToPoint:CGPointMake(22.18, 46.06)];
    [fill1 addCurveToPoint:CGPointMake(22.35, 47.96) controlPoint1:CGPointMake(21.7, 46.63) controlPoint2:CGPointMake(21.78, 47.48)];
    [fill1 addCurveToPoint:CGPointMake(23.22, 48.28) controlPoint1:CGPointMake(22.6, 48.17) controlPoint2:CGPointMake(22.91, 48.28)];
    [fill1 addCurveToPoint:CGPointMake(24.26, 47.79) controlPoint1:CGPointMake(23.6, 48.28) controlPoint2:CGPointMake(23.99, 48.11)];
    [fill1 addLineToPoint:CGPointMake(24.85, 47.08)];
    [fill1 addCurveToPoint:CGPointMake(24.67, 45.18) controlPoint1:CGPointMake(25.33, 46.51) controlPoint2:CGPointMake(25.25, 45.66)];
    [fill1 addCurveToPoint:CGPointMake(22.77, 45.35) controlPoint1:CGPointMake(24.1, 44.7) controlPoint2:CGPointMake(23.25, 44.77)];
    [fill1 addLineToPoint:CGPointMake(22.77, 45.35)];
    [fill1 closePath];
    [fill1 moveToPoint:CGPointMake(64.15, 22.47)];
    [fill1 addLineToPoint:CGPointMake(42.84, 39.44)];
    [fill1 addLineToPoint:CGPointMake(21.01, 21.66)];
    [fill1 addCurveToPoint:CGPointMake(19.1, 21.85) controlPoint1:CGPointMake(20.43, 21.18) controlPoint2:CGPointMake(19.57, 21.28)];
    [fill1 addCurveToPoint:CGPointMake(19.3, 23.75) controlPoint1:CGPointMake(18.63, 22.43) controlPoint2:CGPointMake(18.72, 23.28)];
    [fill1 addLineToPoint:CGPointMake(32.33, 34.37)];
    [fill1 addLineToPoint:CGPointMake(25.66, 41.88)];
    [fill1 addCurveToPoint:CGPointMake(25.77, 43.8) controlPoint1:CGPointMake(25.16, 42.44) controlPoint2:CGPointMake(25.21, 43.3)];
    [fill1 addCurveToPoint:CGPointMake(26.67, 44.14) controlPoint1:CGPointMake(26.03, 44.02) controlPoint2:CGPointMake(26.35, 44.14)];
    [fill1 addCurveToPoint:CGPointMake(27.68, 43.68) controlPoint1:CGPointMake(27.04, 44.14) controlPoint2:CGPointMake(27.41, 43.98)];
    [fill1 addLineToPoint:CGPointMake(34.43, 36.08)];
    [fill1 addLineToPoint:CGPointMake(41.98, 42.22)];
    [fill1 addCurveToPoint:CGPointMake(42.83, 42.53) controlPoint1:CGPointMake(42.23, 42.42) controlPoint2:CGPointMake(42.53, 42.53)];
    [fill1 addCurveToPoint:CGPointMake(43.68, 42.23) controlPoint1:CGPointMake(43.13, 42.53) controlPoint2:CGPointMake(43.43, 42.43)];
    [fill1 addLineToPoint:CGPointMake(51.21, 36.23)];
    [fill1 addCurveToPoint:CGPointMake(51.32, 36.43) controlPoint1:CGPointMake(51.25, 36.29) controlPoint2:CGPointMake(51.27, 36.37)];
    [fill1 addLineToPoint:CGPointMake(59.46, 46.16)];
    [fill1 addCurveToPoint:CGPointMake(60.5, 46.65) controlPoint1:CGPointMake(59.73, 46.48) controlPoint2:CGPointMake(60.11, 46.65)];
    [fill1 addCurveToPoint:CGPointMake(61.37, 46.33) controlPoint1:CGPointMake(60.8, 46.65) controlPoint2:CGPointMake(61.11, 46.54)];
    [fill1 addCurveToPoint:CGPointMake(61.54, 44.42) controlPoint1:CGPointMake(61.94, 45.85) controlPoint2:CGPointMake(62.01, 45)];
    [fill1 addLineToPoint:CGPointMake(53.4, 34.69)];
    [fill1 addCurveToPoint:CGPointMake(53.27, 34.59) controlPoint1:CGPointMake(53.36, 34.65) controlPoint2:CGPointMake(53.31, 34.63)];
    [fill1 addLineToPoint:CGPointMake(65.83, 24.59)];
    [fill1 addCurveToPoint:CGPointMake(66.05, 22.68) controlPoint1:CGPointMake(66.42, 24.12) controlPoint2:CGPointMake(66.51, 23.27)];
    [fill1 addCurveToPoint:CGPointMake(64.15, 22.47) controlPoint1:CGPointMake(65.59, 22.1) controlPoint2:CGPointMake(64.74, 22)];
    [fill1 addLineToPoint:CGPointMake(64.15, 22.47)];
    [fill1 closePath];
    [fill1 moveToPoint:CGPointMake(82.53, 59.62)];
    [fill1 addCurveToPoint:CGPointMake(78.56, 63.59) controlPoint1:CGPointMake(82.53, 61.81) controlPoint2:CGPointMake(80.75, 63.59)];
    [fill1 addLineToPoint:CGPointMake(9.38, 63.59)];
    [fill1 addCurveToPoint:CGPointMake(5.41, 59.62) controlPoint1:CGPointMake(7.19, 63.59) controlPoint2:CGPointMake(5.41, 61.81)];
    [fill1 addLineToPoint:CGPointMake(5.41, 9.38)];
    [fill1 addCurveToPoint:CGPointMake(9.38, 5.41) controlPoint1:CGPointMake(5.41, 7.19) controlPoint2:CGPointMake(7.19, 5.41)];
    [fill1 addLineToPoint:CGPointMake(78.56, 5.41)];
    [fill1 addCurveToPoint:CGPointMake(82.53, 9.38) controlPoint1:CGPointMake(80.75, 5.41) controlPoint2:CGPointMake(82.53, 7.19)];
    [fill1 addLineToPoint:CGPointMake(82.53, 59.62)];
    [fill1 closePath];
    [fill1 moveToPoint:CGPointMake(78.56, 0)];
    [fill1 addLineToPoint:CGPointMake(9.38, 0)];
    [fill1 addCurveToPoint:CGPointMake(0, 9.38) controlPoint1:CGPointMake(4.2, 0) controlPoint2:CGPointMake(0, 4.2)];
    [fill1 addLineToPoint:CGPointMake(0, 59.62)];
    [fill1 addCurveToPoint:CGPointMake(9.38, 69) controlPoint1:CGPointMake(0, 64.8) controlPoint2:CGPointMake(4.2, 69)];
    [fill1 addLineToPoint:CGPointMake(78.56, 69)];
    [fill1 addCurveToPoint:CGPointMake(87.94, 59.62) controlPoint1:CGPointMake(83.74, 69) controlPoint2:CGPointMake(87.94, 64.8)];
    [fill1 addLineToPoint:CGPointMake(87.94, 9.38)];
    [fill1 addCurveToPoint:CGPointMake(78.56, 0) controlPoint1:CGPointMake(87.94, 4.2) controlPoint2:CGPointMake(83.74, 0)];
    [fill1 addLineToPoint:CGPointMake(78.56, 0)];
    [fill1 closePath];
    [fill1 moveToPoint:CGPointMake(78.56, 0)];
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 38, 46);
    fill1.usesEvenOddFillRule = YES;
    [[LTLThemeManager sharedManager].themeColor setFill];
    [fill1 fill];
    CGContextRestoreGState(context);
    
    CGContextRestoreGState(context);
}


#pragma mark - Canvas Images

//! Page 1

+(UIImage *) imageOfContact
{
    static UIImage * image = nil;
    if (image != nil)
        return image;
    
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(160, 160), NO, 0);
    [LTLcontact drawContact];
    image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return image;
}

+(UIImage *) imageOfContactWithSize:(CGSize)size resizing:(LTLcontactResizingBehavior)resizing
{
    UIImage *image = nil;
    
    UIGraphicsBeginImageContextWithOptions(size, NO, 0);
    [LTLcontact drawContactWithFrame:CGRectMake(0, 0, size.width, size.height) resizing:resizing];
    image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return image;
}


#pragma mark - Resizing Behavior

CGRect LTLcontactResizingBehaviorApply(LTLcontactResizingBehavior behavior, CGRect rect, CGRect target)
{
    if (CGRectEqualToRect(rect, target) || CGRectEqualToRect(target, CGRectZero))
    {
        return rect;
    }
    
    CGSize scales = CGSizeZero;
    scales.width = ABS(target.size.width / rect.size.width);
    scales.height = ABS(target.size.height / rect.size.height);
    
    switch (behavior)
    {
        case LTLcontactResizingBehaviorAspectFit:
        {
            scales.width = MIN(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case LTLcontactResizingBehaviorAspectFill:
        {
            scales.width = MAX(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case LTLcontactResizingBehaviorStretch:
            break;
        
        case LTLcontactResizingBehaviorCenter:
        {
            scales.width = 1;
            scales.height = 1;
            break;
        }
    }
    
    CGRect result = CGRectStandardize(rect);
    result.size.width *= scales.width;
    result.size.height *= scales.height;
    result.origin.x = target.origin.x + (target.size.width - result.size.width) / 2;
    result.origin.y = target.origin.y + (target.size.height - result.size.height) / 2;
    return result;
}


@end
