//
//  LTLshareWhite.m
//  音乐播放器
//
//  Created by 李泰良 on 16/12/10.
//  Copyright © 2016 LTL. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

@import UIKit;
#import "LTLshareWhite.h"



@implementation LTLshareWhite


#pragma mark - Canvas Drawings

//! Page 1

+(void) drawArtboard
{
    [LTLshareWhite drawArtboardWithFrame:CGRectMake(0, 0, 51, 49) resizing:LTLshareWhiteResizingBehaviorAspectFit];
}

+(void) drawArtboardWithFrame:(CGRect)frame resizing:(LTLshareWhiteResizingBehavior)resizing
{
    //! General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //! Resize To Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = LTLshareWhiteResizingBehaviorApply(resizing, CGRectMake(0, 0, 51, 49), frame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGSize resizedScale = CGSizeMake(resizedFrame.size.width / 51, resizedFrame.size.height / 49);
    CGContextScaleCTM(context, resizedScale.width, resizedScale.height);
    
    //! Group
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 4, 3);
        
        //! Fill 1
        UIBezierPath *fill1 = [UIBezierPath bezierPath];
        [fill1 moveToPoint:CGPointZero];
        [fill1 addLineToPoint:CGPointMake(23.68, 10.94)];
        [fill1 addLineToPoint:CGPointMake(25.99, 17.91)];
        [fill1 addLineToPoint:CGPointMake(27.54, 8.95)];
        [fill1 addLineToPoint:CGPointZero];
        [fill1 closePath];
        [fill1 moveToPoint:CGPointZero];
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 22.25, 14.47);
        CGContextScaleCTM(context, -1, 1);
        CGContextRotateCTM(context, 366 * M_PI/180);
        CGContextTranslateCTM(context, -13.77, -8.95);
        fill1.usesEvenOddFillRule = YES;
        [UIColor.whiteColor setFill];
        [fill1 fill];
        CGContextRestoreGState(context);
        
        //! Fill 2
        UIBezierPath *fill2 = [UIBezierPath bezierPath];
        [fill2 moveToPoint:CGPointMake(1.37, 0.56)];
        [fill2 addLineToPoint:CGPointMake(34.77, 10.05)];
        [fill2 addLineToPoint:CGPointMake(40.96, 4.88)];
        [fill2 addLineToPoint:CGPointZero];
        [fill2 addLineToPoint:CGPointMake(19.96, 26.6)];
        [fill2 addLineToPoint:CGPointMake(28.49, 14.73)];
        [fill2 addLineToPoint:CGPointMake(1.37, 0.56)];
        [fill2 closePath];
        [fill2 moveToPoint:CGPointMake(1.37, 0.56)];
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 21.92, 16.34);
        CGContextScaleCTM(context, -1, 1);
        CGContextRotateCTM(context, 366 * M_PI/180);
        CGContextTranslateCTM(context, -20.48, -13.3);
        fill2.usesEvenOddFillRule = YES;
        [UIColor.whiteColor setFill];
        [fill2 fill];
        CGContextRestoreGState(context);
        
        //! Fill 3
        UIBezierPath *fill3 = [UIBezierPath bezierPath];
        [fill3 moveToPoint:CGPointMake(2.16, 0)];
        [fill3 addLineToPoint:CGPointMake(0, 2.75)];
        [fill3 addLineToPoint:CGPointMake(4.8, 5.94)];
        [fill3 addLineToPoint:CGPointMake(2.16, 0)];
        [fill3 closePath];
        [fill3 moveToPoint:CGPointMake(2.16, 0)];
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 13.56, 22.54);
        CGContextScaleCTM(context, -1, 1);
        CGContextRotateCTM(context, 366 * M_PI/180);
        CGContextTranslateCTM(context, -2.4, -2.97);
        fill3.usesEvenOddFillRule = YES;
        [UIColor.whiteColor setFill];
        [fill3 fill];
        CGContextRestoreGState(context);
        
        //! Fill 4
        UIBezierPath *fill4 = [UIBezierPath bezierPath];
        [fill4 moveToPoint:CGPointMake(1.03, 16.22)];
        [fill4 addLineToPoint:CGPointMake(0.72, 15.64)];
        [fill4 addCurveToPoint:CGPointMake(5.8, 11.53) controlPoint1:CGPointMake(2.28, 14.81) controlPoint2:CGPointMake(4.75, 13.29)];
        [fill4 addCurveToPoint:CGPointMake(2.85, 12.81) controlPoint1:CGPointMake(5.02, 12.19) controlPoint2:CGPointMake(3.96, 12.83)];
        [fill4 addCurveToPoint:CGPointMake(0.58, 11.51) controlPoint1:CGPointMake(1.97, 12.79) controlPoint2:CGPointMake(1.2, 12.35)];
        [fill4 addCurveToPoint:CGPointMake(1.38, 6.99) controlPoint1:CGPointMake(-0.54, 10.01) controlPoint2:CGPointMake(0.1, 8.04)];
        [fill4 addCurveToPoint:CGPointMake(5.9, 7.42) controlPoint1:CGPointMake(2.47, 6.09) controlPoint2:CGPointMake(4.31, 5.67)];
        [fill4 addCurveToPoint:CGPointMake(6.92, 9.32) controlPoint1:CGPointMake(6.45, 8.02) controlPoint2:CGPointMake(6.8, 8.66)];
        [fill4 addCurveToPoint:CGPointMake(8.04, 4.82) controlPoint1:CGPointMake(7.85, 7.93) controlPoint2:CGPointMake(8.25, 6.36)];
        [fill4 addCurveToPoint:CGPointMake(5.37, 0.54) controlPoint1:CGPointMake(7.82, 3.11) controlPoint2:CGPointMake(6.87, 1.59)];
        [fill4 addLineToPoint:CGPointMake(5.75, 0)];
        [fill4 addCurveToPoint:CGPointMake(8.7, 4.73) controlPoint1:CGPointMake(7.4, 1.16) controlPoint2:CGPointMake(8.45, 2.84)];
        [fill4 addCurveToPoint:CGPointMake(6.94, 10.39) controlPoint1:CGPointMake(8.95, 6.71) controlPoint2:CGPointMake(8.33, 8.71)];
        [fill4 addCurveToPoint:CGPointMake(6.93, 10.45) controlPoint1:CGPointMake(6.93, 10.41) controlPoint2:CGPointMake(6.93, 10.42)];
        [fill4 addCurveToPoint:CGPointMake(1.03, 16.22) controlPoint1:CGPointMake(6.51, 12.84) controlPoint2:CGPointMake(3.49, 14.91)];
        [fill4 addLineToPoint:CGPointMake(1.03, 16.22)];
        [fill4 closePath];
        [fill4 moveToPoint:CGPointMake(3.44, 6.88)];
        [fill4 addCurveToPoint:CGPointMake(1.8, 7.5) controlPoint1:CGPointMake(2.82, 6.88) controlPoint2:CGPointMake(2.25, 7.14)];
        [fill4 addCurveToPoint:CGPointMake(1.1, 11.12) controlPoint1:CGPointMake(0.76, 8.36) controlPoint2:CGPointMake(0.21, 9.94)];
        [fill4 addCurveToPoint:CGPointMake(2.87, 12.16) controlPoint1:CGPointMake(1.61, 11.79) controlPoint2:CGPointMake(2.2, 12.14)];
        [fill4 addLineToPoint:CGPointMake(2.93, 12.16)];
        [fill4 addCurveToPoint:CGPointMake(6.31, 10.11) controlPoint1:CGPointMake(4.38, 12.16) controlPoint2:CGPointMake(5.8, 10.7)];
        [fill4 addCurveToPoint:CGPointMake(5.41, 7.85) controlPoint1:CGPointMake(6.38, 9.33) controlPoint2:CGPointMake(6.08, 8.59)];
        [fill4 addCurveToPoint:CGPointMake(3.44, 6.88) controlPoint1:CGPointMake(4.77, 7.15) controlPoint2:CGPointMake(4.08, 6.88)];
        [fill4 addLineToPoint:CGPointMake(3.44, 6.88)];
        [fill4 closePath];
        [fill4 moveToPoint:CGPointMake(3.44, 6.88)];
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 11.85, 33.83);
        CGContextScaleCTM(context, -1, 1);
        CGContextRotateCTM(context, 363 * M_PI/180);
        CGContextTranslateCTM(context, -4.38, -8.11);
        fill4.usesEvenOddFillRule = YES;
        [UIColor.whiteColor setFill];
        [fill4 fill];
        CGContextRestoreGState(context);
        
        CGContextRestoreGState(context);
    }
    
    CGContextRestoreGState(context);
}


#pragma mark - Canvas Images

//! Page 1

+(UIImage *) imageOfArtboard
{
    static UIImage * image = nil;
    if (image != nil)
        return image;
    
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(51, 49), NO, 0);
    [LTLshareWhite drawArtboard];
    image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return image;
}

+(UIImage *) imageOfArtboardWithSize:(CGSize)size resizing:(LTLshareWhiteResizingBehavior)resizing
{
    UIImage *image = nil;
    
    UIGraphicsBeginImageContextWithOptions(size, NO, 0);
    [LTLshareWhite drawArtboardWithFrame:CGRectMake(0, 0, size.width, size.height) resizing:resizing];
    image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return image;
}


#pragma mark - Resizing Behavior

CGRect LTLshareWhiteResizingBehaviorApply(LTLshareWhiteResizingBehavior behavior, CGRect rect, CGRect target)
{
    if (CGRectEqualToRect(rect, target) || CGRectEqualToRect(target, CGRectZero))
    {
        return rect;
    }
    
    CGSize scales = CGSizeZero;
    scales.width = ABS(target.size.width / rect.size.width);
    scales.height = ABS(target.size.height / rect.size.height);
    
    switch (behavior)
    {
        case LTLshareWhiteResizingBehaviorAspectFit:
        {
            scales.width = MIN(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case LTLshareWhiteResizingBehaviorAspectFill:
        {
            scales.width = MAX(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case LTLshareWhiteResizingBehaviorStretch:
            break;
        
        case LTLshareWhiteResizingBehaviorCenter:
        {
            scales.width = 1;
            scales.height = 1;
            break;
        }
    }
    
    CGRect result = CGRectStandardize(rect);
    result.size.width *= scales.width;
    result.size.height *= scales.height;
    result.origin.x = target.origin.x + (target.size.width - result.size.width) / 2;
    result.origin.y = target.origin.y + (target.size.height - result.size.height) / 2;
    return result;
}


@end
